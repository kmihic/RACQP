#! /bin/bash

# Run SVM

# if no arguments passed, print out help
if [ "$#" -eq 0 ]; then
    echo
    echo "Usage: runMe instance_list_file log_file_dir Q_type c-values sigma-values solver beta"
    echo "Q_type : DYNAMIC  or CACHED or STATIC"
    echo "c-values: an array, for example \"0.05, 0.1, 1, 10\" "
    echo "sigma-values: an array, for example \"0.05, 0.1, 1, 10\" "
    echo "solver: ALL or RAC or LIB or MAT"
    echo "beta: an array, for example \"0.1, 1\"" 
    echo "Beta must be defined if RAC used. Values in percentage of number of blocks. Number of blocks defined internally as problem_size/max_block_size, with max_block_size=100"
    echo
    exit 1
fi

# first argument is the file which lists instances 
LIST=$1
# second argument is the directory where the logs files will be recorded
DPATH=$2
# define other arguments
STATIC_Q=$3
C_in=$4
S_in=$5
USE=$6
BETA=$7
SBLC=100

# in the case that the test_data file is not provided (i.e. a file with ".t" sufix does not end), we
# will use the first 70% of the instance data for training and the rest for testing
P_TRAIN=0.7
SOL=`echo RAC`

if [ "$USE" == "ALL" ]
then
 USE_RAC=`echo true`
 USE_LIBSVM=`echo true`
 USE_MAT=`echo true`
 SUFIX=`echo ALL`
 if [ -z "$BETA" ]
 then
  echo Must define beta when using RAC
  exit 0
 fi
elif [ "$USE" == "RAC" ]
then
 USE_RAC=`echo true`
 USE_LIBSVM=`echo false`
 USE_MAT=`echo false`
 SUFIX=`echo SBL${SBLC}_RAC_${STATIC_Q}`
 if [ -z "$BETA" ]
 then
  echo Must define beta when using RAC
  exit 0
 fi
elif [ "$USE" == "LIB" ]
then
 USE_RAC=`echo false`
 USE_LIBSVM=`echo true`
 USE_MAT=`echo false`
 SUFIX=`echo LIBSVM`
 BETA=0
elif [ "$USE" == "MAT" ]
then
 USE_RAC=`echo false`
 USE_LIBSVM=`echo false`
 USE_MAT=`echo true`
 SUFIX=`echo MAT`
 BETA=0
else
 echo Must define the solver
 exit 0
fi

# for each instance in the list
for FILE in `cat $LIST`
do
  for C in $C_in
  do
   for S in $S_in
   do
      # set log file name
      log_file=`echo ${DPATH}/SVM_${FILE}_C${C}_S${S}_${SUFIX}.log`
      # print out the command we are using to the begining of the log file
      if [ -e "./data/${FILE}.t" ]
      then
        echo "matlab -nodisplay -nosplash -nodesktop -nojvm -r \"test_SVM('${FILE}','${FILE}.t','./data/',1,1,[${BETA}],[${C}],[${S}],'${STATIC_Q}',${USE_RAC},${USE_LIBSVM},${USE_MAT},'${SOL}',true,false,${SBLC})\"" > $log_file
      else
        echo "matlab -nodisplay -nosplash -nodesktop -nojvm -r \"test_SVM('${FILE}','','./data/',${P_TRAIN},1,[${BETA}],[${C}],[${S}],'${STATIC_Q}',${USE_RAC},${USE_LIBSVM},${USE_MAT},'${SOL}',true,false,${SBLC})\"" > $log_file
      fi
      # To run experiments in parallel, remove comments before  '&' at the end of the command lines. This sends the process to background.
      # There will be M processes run in parallel, where M is the size of SIGMA list
      # Make sure no more than N processes is run at the time, with N being the number of ACTUAL cores (no hyperthreading)
      # If hyperthreading is on, then set N to be number_of_threads/2
      # Make sure that the processes are not using swap file.
      # Note: to limit number of processes, just make SIGMA list shorter
      if [ -e "./data/${FILE}.t" ]
      then
        matlab -nodisplay -nosplash -nodesktop -nojvm -r "test_SVM('${FILE}','${FILE}.t','./data/',1,1,[${BETA}],[${C}],[${S}],'${STATIC_Q}',${USE_RAC},${USE_LIBSVM},${USE_MAT},'${SOL}',true, false,${SBLC})" >> $log_file # &
      else
        matlab -nodisplay -nosplash -nodesktop -nojvm -r "test_SVM('${FILE}','','./data/',${P_TRAIN},1,[${BETA}],[${C}],[${S}],'${STATIC_Q}',${USE_RAC},${USE_LIBSVM},${USE_MAT},'${SOL}',true, false,${SBLC})" >> $log_file # &
      fi
    done
  # wait for all the processes started in parallel to finish
  wait
  done
done
wait


